### padronização ###
names(df_resultados)[1] <- "Site"
# para o resultada das simulações de k[0.45;0.30]
df_resultados.k045_030 <- filter(df_resultados,k=="0.99") %>% dplyr::select(-k) %>% unique
df_resultados.k045_030[,"GOF"] <- NA
df_bateria <- data_frame(Site=gl(80,4*2,labels=unique(df_resultados.k045_030$Site)),
k=gl(4,80*2,labels = seq(0.45,0.30,-0.05)),
MN=gl(2,4*80,labels = c("EE","EI")) )
df_resultados.k045_030 %<>% left_join(x=df_bateria,y=.,by = c("Site","MN"))
# dim(df_resultados) == dim(df_resultados.k045_030)
rbind(df_resultados,df_resultados.k045_030)
## fatores
df_resultados$Site <- factor(df_resultados$Site)
df_resultados$k <- factor(df_resultados$k,levels=unique(df_resultados$k))
df_resultados$k.0 = as.numeric(as.character(df_resultados$k))
df_resultados$MN <- factor(df_resultados$MN,levels = c("EE","EI"))
# df_resultados$k %>% contrasts()
# df_resultados$MN %>% contrasts()
### z score ###
f_z <- function(x){
m <- base::mean(x,na.rm=TRUE)
sd <- sd(x,na.rm=TRUE)
output <- (x-m)/sd
return(output)
}
df_resultados.z <- as.data.frame(apply(df_resultados[6:12],2,f_z))
names(df_resultados.z) <- sapply(names(df_resultados[6:12]), function(x) paste(x,".z",sep=""))
df_resultados %<>% cbind(.,df_resultados.z)
### Summary ###
# summary(df_resultados)
# str(df_resultados)
# head(df_resultados)
## rm
ls()
rm(list=c("df_bateria","f_z","df_resultados.k045_030","df_resultados.z"))
df_resultados <- readr::read_csv("/home/danilo/Documentos/Doutorado/artigo_mestrado/Rmd_e_dados/df_resultados.csv")
names(df_resultados)[1] <- "Site"
df_resultados.k045_030 <- filter(df_resultados,k=="0.99") %>% dplyr::select(-k) %>% unique
df_resultados.k045_030[,"GOF"] <- NA
df_bateria <- data_frame(Site=gl(80,4*2,labels=unique(df_resultados.k045_030$Site)),
k=gl(4,80*2,labels = seq(0.45,0.30,-0.05)),
MN=gl(2,4*80,labels = c("EE","EI")) )
df_resultados.k045_030 %<>% left_join(x=df_bateria,y=.,by = c("Site","MN"))
df_resultados %<>% rbind(.,df_resultados.k045_030)
### leitura ###
df_resultados <- readr::read_csv("/home/danilo/Documentos/Doutorado/artigo_mestrado/Rmd_e_dados/df_resultados.csv")
# df_resultados %>% str
### padronização ###
names(df_resultados)[1] <- "Site"
# para o resultada das simulações de k[0.45;0.30]
df_resultados.k045_030 <- filter(df_resultados,k=="0.99") %>% dplyr::select(-k) %>% unique
df_resultados.k045_030[,"GOF"] <- NA
df_bateria <- data_frame(Site=gl(80,4*2,labels=unique(df_resultados.k045_030$Site)),
k=gl(4,80*2,labels = seq(0.45,0.30,-0.05)),
MN=gl(2,4*80,labels = c("EE","EI")) )
df_resultados.k045_030 %<>% left_join(x=df_bateria,y=.,by = c("Site","MN"))
# dim(df_resultados) == dim(df_resultados.k045_030)
df_resultados %<>% rbind(.,df_resultados.k045_030)
## fatores
df_resultados$Site <- factor(df_resultados$Site)
df_resultados$k <- factor(df_resultados$k,levels=unique(df_resultados$k))
df_resultados$k.0 = as.numeric(as.character(df_resultados$k))
df_resultados$MN <- factor(df_resultados$MN,levels = c("EE","EI"))
# df_resultados$k %>% contrasts()
# df_resultados$MN %>% contrasts()
### z score ###
f_z <- function(x){
m <- base::mean(x,na.rm=TRUE)
sd <- sd(x,na.rm=TRUE)
output <- (x-m)/sd
return(output)
}
df_resultados.z <- as.data.frame(apply(df_resultados[6:12],2,f_z))
names(df_resultados.z) <- sapply(names(df_resultados[6:12]), function(x) paste(x,".z",sep=""))
df_resultados %<>% cbind(.,df_resultados.z)
### Summary ###
# summary(df_resultados)
# str(df_resultados)
# head(df_resultados)
## rm
# ls()
rm(list=c("df_bateria","f_z","df_resultados.k045_030","df_resultados.z"))
# k continua ou discreta tem diferença?
l_md <- vector("list",2)
names(l_md) <- c("k.z","k.f")
l_md[[1]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k.z * MN + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
library(gridExtra)
library(tidyverse)
library(magrittr)
library(plyr)
library(DHARMa) # resíduos quantilicos
library(lme4) # pacote de criação dos modelos estatísticos
# k continua ou discreta tem diferença?
l_md <- vector("list",2)
names(l_md) <- c("k.z","k.f")
l_md[[1]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k.z * MN + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
df_resultados
df_resultados <- readr::read_csv("/home/danilo/Documentos/Doutorado/artigo_mestrado/Rmd_e_dados/df_resultados.csv")
names(df_resultados)[1] <- "Site"
df_resultados.k045_030 <- filter(df_resultados,k=="0.99") %>% dplyr::select(-k) %>% unique
df_resultados.k045_030[,"GOF"] <- NA
df_bateria <- data_frame(Site=gl(80,4*2,labels=unique(df_resultados.k045_030$Site)),
k=gl(4,80*2,labels = seq(0.45,0.30,-0.05)),
MN=gl(2,4*80,labels = c("EE","EI")) )
df_resultados.k045_030 %<>% left_join(x=df_bateria,y=.,by = c("Site","MN"))
df_resultados %<>% rbind(.,df_resultados.k045_030)
df_resultados$Site <- factor(df_resultados$Site)
df_resultados$k <- factor(df_resultados$k,levels=unique(df_resultados$k))
df_resultados$k.0 = as.numeric(as.character(df_resultados$k))
df_resultados$MN <- factor(df_resultados$MN,levels = c("EE","EI"))
names(df_resultados)
library(gridExtra)
library(tidyverse)
library(magrittr)
library(plyr)
library(DHARMa) # resíduos quantilicos
library(lme4) # pacote de criação dos modelos estatísticos
### leitura ###
df_resultados <- readr::read_csv("/home/danilo/Documentos/Doutorado/artigo_mestrado/Rmd_e_dados/df_resultados.csv")
# df_resultados %>% str
### padronização ###
names(df_resultados)[1] <- "Site"
# para o resultada das simulações de k[0.45;0.30]
df_resultados.k045_030 <- filter(df_resultados,k=="0.99") %>% dplyr::select(-k) %>% unique
df_resultados.k045_030[,"GOF"] <- NA
df_bateria <- data_frame(Site=gl(80,4*2,labels=unique(df_resultados.k045_030$Site)),
k=gl(4,80*2,labels = seq(0.45,0.30,-0.05)),
MN=gl(2,4*80,labels = c("EE","EI")) )
df_resultados.k045_030 %<>% left_join(x=df_bateria,y=.,by = c("Site","MN"))
# dim(df_resultados) == dim(df_resultados.k045_030)
df_resultados %<>% rbind(.,df_resultados.k045_030)
## fatores
df_resultados$Site <- factor(df_resultados$Site)
df_resultados$k <- factor(df_resultados$k,levels=unique(df_resultados$k))
df_resultados$k.0 = as.numeric(as.character(df_resultados$k))
df_resultados$MN <- factor(df_resultados$MN,levels = c("EE","EI"))
# df_resultados$k %>% contrasts()
# df_resultados$MN %>% contrasts()
### z score ###
f_z <- function(x){
m <- base::mean(x,na.rm=TRUE)
sd <- sd(x,na.rm=TRUE)
output <- (x-m)/sd
return(output)
}
df_resultados.z <- as.data.frame(apply(df_resultados[c(6:12,19)],2,f_z))
names(df_resultados.z) <- sapply(names(df_resultados[c(6:12,19)]), function(x) paste(x,".z",sep=""))
df_resultados %<>% cbind(.,df_resultados.z)
names(df_resultados)
### Summary ###
# summary(df_resultados)
# str(df_resultados)
# head(df_resultados)
## rm
# ls()
rm(list=c("df_bateria","f_z","df_resultados.k045_030","df_resultados.z"))
df_resultados
df_resultados
l_md[[1]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k.0.z * MN + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md[[2]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k * MN + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md[[2]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k * MN + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
AICctab(l_md,weights=T)
library(gridExtra)
library(tidyverse)
library(magrittr)
library(plyr)
library(DHARMa) # resíduos quantilicos
library(lme4) # pacote de criação dos modelos estatísticos
library(bbmle)
AICctab(l_md,weights=T)
l_md <- vector("list",5)
names(l_md) <- c("k.z 1|Site","k.z MN|Site","k.z k.z*MN|Site","k.f 1|Site","k.f MN|Site")
l_md[[1]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k.0.z * MN + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md[[2]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k.0.z * MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md[[3]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k.0.z * MN + (k.0.z*MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md[[4]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k * MN + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md[[5]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k * MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
AICctab(l_md,weights=T)
l_md.selecao <- vector("list",19)
names(l_md.selecao) <- c("p*k*MN",# modelo cheio
"p*k*MN-p:k:MN", #MC - 3a ordem
"p*(k+MN)","k*(p+MN)","MN*(p+k)", #2 interações
"p*k+MN","p*MN+k","k*MN+p", #1 interação + preditor
"p*k","p*MN","k*MN", #1 interação
"p+k+MN",#aditivo 3
"p+k","p+MN","k+MN", #aditivo 2
"p","k","MN", #preditor isolado
"1") #nulo
#modelo cheio
l_md.selecao[[1]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k * MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
#modelo cheio - interação 3a ordem
l_md.selecao[[2]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k * MN - p.z:k:MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
#2 interações
l_md.selecao[[3]] <- glmer(cbind(GOF,100-GOF) ~ p.z * (k + MN) + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[4]] <- glmer(cbind(GOF,100-GOF) ~ k * (p.z + MN) + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[5]] <- glmer(cbind(GOF,100-GOF) ~ MN * (p.z + k) + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
#1 interação + preditor
l_md.selecao[[6]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k + MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[7]] <- glmer(cbind(GOF,100-GOF) ~ p.z * MN + k + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[8]] <- glmer(cbind(GOF,100-GOF) ~ k * MN + p.z + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
#1 interação
l_md.selecao[[9]] <- glmer(cbind(GOF,100-GOF) ~ p.z * k + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[10]] <- glmer(cbind(GOF,100-GOF) ~ p.z * MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[11]] <- glmer(cbind(GOF,100-GOF) ~ k * MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
#aditivo 3
l_md.selecao[[12]] <- glmer(cbind(GOF,100-GOF) ~ p.z + k + MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
#aditivo 2
l_md.selecao[[13]] <- glmer(cbind(GOF,100-GOF) ~ p.z + k + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[14]] <- glmer(cbind(GOF,100-GOF) ~ p.z + MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[15]] <- glmer(cbind(GOF,100-GOF) ~ k + MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
#aditivo 1
l_md.selecao[[16]] <- glmer(cbind(GOF,100-GOF) ~ p.z + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[17]] <- glmer(cbind(GOF,100-GOF) ~ k + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
l_md.selecao[[18]] <- glmer(cbind(GOF,100-GOF) ~ MN + (MN|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
# nulo
l_md.selecao[[19]] <- glmer(cbind(GOF,100-GOF) ~ 1 + (1|Site), family = "binomial",data=df_resultados,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
AICctab(l_md.selecao,weights=T)
library(gridExtra)
library(tidyverse)
library(magrittr)
library(plyr)
library(DHARMa) # resíduos quantilicos
library(lme4) # pacote de criação dos modelos estatísticos
library(bbmle)
### leitura ###
df_resultados <- readr::read_csv("/home/danilo/Documentos/Doutorado/artigo_mestrado/Rmd_e_dados/df_resultados.csv")
# df_resultados %>% str
### padronização ###
names(df_resultados)[1] <- "Site"
# para o resultada das simulações de k[0.45;0.30]
df_resultados.k045_030 <- filter(df_resultados,k=="0.99") %>% dplyr::select(-k) %>% unique
df_resultados.k045_030[,"GOF"] <- NA
df_bateria <- data_frame(Site=gl(80,4*2,labels=unique(df_resultados.k045_030$Site)),
k=gl(4,80*2,labels = seq(0.45,0.30,-0.05)),
MN=gl(2,4*80,labels = c("EE","EI")) )
df_resultados.k045_030 %<>% left_join(x=df_bateria,y=.,by = c("Site","MN"))
# dim(df_resultados) == dim(df_resultados.k045_030)
df_resultados %<>% rbind(.,df_resultados.k045_030)
## fatores
df_resultados$Site <- factor(df_resultados$Site)
df_resultados$k <- factor(df_resultados$k,levels=unique(df_resultados$k))
df_resultados$k.0 = as.numeric(as.character(df_resultados$k))
df_resultados$MN <- factor(df_resultados$MN,levels = c("EE","EI"))
# df_resultados$k %>% contrasts()
# df_resultados$MN %>% contrasts()
### z score ###
f_z <- function(x){
m <- base::mean(x,na.rm=TRUE)
sd <- sd(x,na.rm=TRUE)
output <- (x-m)/sd
return(output)
}
# names(df_resultados)
df_resultados.z <- as.data.frame(apply(df_resultados[c(6:12,19)],2,f_z))
names(df_resultados.z) <- sapply(names(df_resultados[c(6:12,19)]), function(x) paste(x,".z",sep=""))
df_resultados %<>% cbind(.,df_resultados.z)
### Summary ###
# summary(df_resultados)
# str(df_resultados)
# head(df_resultados)
## rm
# ls()
rm(list=c("df_bateria","f_z","df_resultados.k045_030","df_resultados.z"))
df_plot <- df_resultados %>% dplyr::filter(k=="0.99" & MN=="EE") %>% dplyr::select(Site, p, S,p.z,S.z) %>% unique
# avaliando as curvas pelo quantiles
# df_plot %<>% mutate(terceiro_quantil = ifelse(p>quantile(df_plot$p,probs=0.75),">_3oQ","<_3oQ"))
l_p <- vector("list",6)
l_p[[1]] <- ggplot(df_plot, aes(x=p)) +
geom_histogram(bins=30) +
geom_vline(xintercept = c(quantile(df_plot$p,probs = c(0.25,0.50,0.75))),color="red")
# geom_density()
l_p[[2]] <- ggplot(df_plot, aes(x=p.z)) +
geom_histogram(bins=30) +
geom_vline(xintercept = c(quantile(df_plot$p.z,probs = c(0.25,0.50,0.75))),color="red")
# geom_density()
l_p[[3]] <- ggplot(df_plot, aes(x=S)) +
geom_histogram(bins=30) +
geom_vline(xintercept = quantile(df_plot$S,probs = c(0.25,0.50,0.75)),color="red")
l_p[[4]] <- ggplot(df_plot, aes(x=S.z)) +
geom_histogram(bins=30) +
geom_vline(xintercept = c(quantile(df_plot$S.z,probs = c(0.25,0.50,0.75))),color="red")
l_p[[5]] <- ggplot(df_plot, aes(x=p,y=S)) +
geom_hline(yintercept = quantile(df_plot$S,probs = c(0.25,0.50,0.75)),color="red") +
geom_vline(xintercept = quantile(df_plot$p,probs = c(0.25,0.50,0.75)),color="red") +
geom_point() +
geom_smooth(method="lm")
l_p[[6]] <- ggplot(df_plot, aes(x=p.z,y=S.z)) +
geom_hline(yintercept = quantile(df_plot$S.z,probs = c(0.25,0.50,0.75)),color="red") +
geom_vline(xintercept = quantile(df_plot$p.z,probs = c(0.25,0.50,0.75)),color="red") +
geom_point() +
geom_smooth(method="lm")
# do.call("grid.arrange",c(l_p,ncol=3))
grid.arrange(l_p[[1]],l_p[[2]],l_p[[3]],l_p[[4]],l_p[[5]],l_p[[6]],
layout_matrix = rbind(c(1,1,3,3,5,5),
c(2,2,4,4,6,6) )
)
ls()
AICctab(l_md.selecao,weights=T) %>% head
AICctab(l_md.selecao,weights=T)
l_md.selecao["p*k*MN"]
plot(simulateResiduals(l_md.selecao["p*k*MN"],1000))
teste <- simulateResiduals(l_md.selecao["p*k*MN"],1000)
teste <- simulateResiduals(l_md.selecao[["p*k*MN"]],1000)
teste
plot(simulateResiduals(l_md.selecao[["p*k*MN"]],1000))
knitr::opts_chunk$set(echo = FALSE, tidy = TRUE, include = TRUE, warning = FALSE,cache = TRUE)
plot(simulateResiduals(l_md.selecao[["p*k*MN"]],1000))
l_md.selecao[["p*k*MN"]]
library(doMC)
library(GUILDS)
library(magrittr)
library(tidyverse)
library(plyr)
library(magrittr)
library(tidyverse)
library(plyr)
df_to.merg1 <- read.csv(file="/home/danilo/Área de Trabalho/treeco-em_andamento/to_merge1.csv",as.is = TRUE)
df_to.merg2 <- read.csv(file="/home/danilo/Área de Trabalho/treeco-em_andamento/to_merge2.csv",as.is = TRUE)
df_to.merg1 %>% head
df_to.merge_abundance <- read.csv(file="/home/danilo/Área de Trabalho/treeco-em_andamento/to_merge1.csv",as.is = TRUE)
df_to.merge_traits <- read.csv(file="/home/danilo/Área de Trabalho/treeco-em_andamento/to_merge2.csv",as.is = TRUE)
df_to.merge_traits %>% head
df_to.write <- left_join(x=df_to.merge_traits,y=df_to.merge_abundance,by=c("species.original","locality1"))
df_to.write %>% head
df_to.merge_traits %>% dim
df_to.write %>% dim
write.csv(df_to.write,file="/home/danilo/Área de Trabalho/treeco-em_andamento/df_resultado_merge.csv",row.names = FALSE)
library(doMC)
library(GUILDS)
library(lme4)
library(merTools)
library(magrittr)
library(tidyverse)
library(plyr)
setwd("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/")
df_referencia <- read.csv(file="df_referencia.csv",row.names = 1,as.is = TRUE)
df_referencia %>% ggplot(aes(x=k,y=d)) + geom_boxplot() + geom_jitter()
df_referencia %>% ggplot(aes(x=k,y=d,group_by(k))) + geom_boxplot() + geom_jitter()
df_referencia %>% ggplot(aes(x=k,y=d,group=k)) + geom_boxplot() + geom_jitter()
df_referencia %>% ggplot(aes(x=k,y=d,group=k)) + geom_boxplot() + geom_jitter() +
labs(y="dist. média (metros)")
df_SAD.predita <- read.csv("./resultados/df_replicas.csv")
df_SAD.predita %>% ggplot(aes(x=KS.D,y=KS.p)) +
geom_point() +
facet_wrap(MN~k,ncol=3,scales = "free") +
labs(x="estatística D, teste KS",y="p-valor")
knitr::opts_chunk$set(echo = FALSE, tidy = TRUE, include = TRUE, warning = FALSE,cache = TRUE,message = FALSE)
df_resultados <- readr::read_csv("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/resultados/df_resultados.csv")
df_resultados <- readr::read_csv("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/resultados/df_resultados.csv")
# df_resultados %>% str
df_resultados$MN <- factor(df_resultados$MN,levels = c("EI","EE"))
df_resultados$SiteCode <- factor(df_resultados$SiteCode)
df_resultados$k <- factor(df_resultados$k,levels=unique(df_resultados$k))
# df_resultados$k %>% contrasts()
# df_resultados$MN %>% contrasts()
#### z score ###
f_z <- function(x){
m <- base::mean(x,na.rm=TRUE)
sd <- sd(x,na.rm=TRUE)
output <- (x-m)/sd
return(output)
}
df_resultados %<>% mutate(GOF.z = f_z(GOF),
DA.z = f_z(DA),
p.z = f_z(p),
S.z = f_z(S),
U.z = f_z(U),
m_.z = f_z(m_),
I.z = f_z(I),
d.z = f_z(d),
J.z = f_z(J),
k.z0 = as.numeric(as.character(k)),
k.z = f_z(k.z0))
df_resultados <- readr::read_csv("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/resultados/df_resultados.csv")
# df_resultados %>% str
df_resultados$MN <- factor(df_resultados$MN,levels = c("EI","EE"))
df_resultados$SiteCode <- factor(df_resultados$SiteCode)
df_resultados$k <- factor(df_resultados$k,levels=unique(df_resultados$k))
# df_resultados$k %>% contrasts()
# df_resultados$MN %>% contrasts()
#### z score ###
names(df_resultados)[1] <- "Site"
df_resultados
path_paisagens <- Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/.*txt")
path_paisagens
path_paisagens <- Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/.*txt")
path_paisagens <- Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/.*txt")
path_paisagens
path_paisagens <- Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/*.txt")
path_paisagens
path_paisagens <- Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/*.txt")
path_paisagens
path_paisagens <- Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/*.txt")
df_resultados %>% head
df_simulacao <- map_df(Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/U/*.csv"),read.csv)
df_simulacao
path_paisagens
path_paisagens <- Sys.glob("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/*.txt")
path_paisagens <- Sys.glob("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/*.txt")
path_paisagens
path_paisagens <- Sys.glob("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/*.txt")
df_simulacao <- map_df(Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/U/*.csv"),read.csv)
df_simulacao %<>% ddply("SiteCode", head(txt.file)) %>%
left_join(x=.,
y=data.frame(txt.file=gsub("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/","",path_paisagens),path_paisagens),
by = "txt.file")
df_simulacao %>% ddply("SiteCode", head(txt.file)) # %>%
df_simulacao
path_paisagens <- Sys.glob("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/*.txt")
df_simulacao <- map_df(Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/U/*.csv"),read.csv)
df_simulacao %<>% dplyr::select(SiteCode,txt.file) %>% unique %>%
left_join(x=.,
y=data.frame(txt.file=gsub("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/","",path_paisagens),path_paisagens),
by = "txt.file")
df_simulacao
df_simulacao <- map_df(Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/U/*.csv"),read.csv)
df_simulacao
path_paisagens <- Sys.glob("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/*.txt")
df_simulacao <- map_df(Sys.glob("~/Documentos/Doutorado/artigo_mestrado/simulacao/U/*.csv"),read.csv)
df_simulacao %<>% dplyr::select(SiteCode,p,J,S,DA,txt.file) %>% unique %>%
left_join(x=.,
y=data.frame(txt.file=gsub("/home/danilo/Documentos/Doutorado/artigo_mestrado/simulacao/","",path_paisagens),path_paisagens),
by = "txt.file")
df_simulacao
knitr::opts_chunk$set(echo = FALSE, tidy = TRUE, include = TRUE, warning = FALSE,cache = TRUE)
a_ply(df_simulacao,1,f_plot)
f_plot <- function(X){
rotate <- function(a) t(apply(a, 2, rev))
image(rotate(read.csv(X$path_paisagens)),useRaster=TRUE,axes=FALSE)
title(main=X$txt.file)
}
a_ply(df_simulacao,1,f_plot)
X <- df_simulacao[1,]
mat_paisagem <- read.csv(X$path_paisagens)
X
X$path_paisagens
df_simulacao$path_paisagens %<>% as.character()
f_plot <- function(X){
X <- df_simulacao[1,]
mat_paisagem <- read.csv(X$path_paisagens)
rotate <- function(a) t(apply(a, 2, rev))
image(rotate(mat_paisagem),useRaster=TRUE,axes=FALSE)
title(main=X$txt.file)
}
X <- df_simulacao[1,]
mat_paisagem <- read.csv(X$path_paisagens)
rotate <- function(a) t(apply(a, 2, rev))
image(rotate(mat_paisagem),useRaster=TRUE,axes=FALSE)
mat_paisagem <- read.csv(X$path_paisagens)
mat_paisagem
mat_paisagem <- read.csv(X$path_paisagens) %>% as.matrix()
mat_paisagem
mat_paisagem %>% class
mat_paisagem %>% dim
mat_paisagem <- read.table(X$path_paisagens,header = FALSE) %>% as.matrix()
mat_paisagem
mat_paisagem %>% class
mat_paisagem %>% dim
rotate <- function(a) t(apply(a, 2, rev))
image(rotate(mat_paisagem))
title(main=X$txt.file)
image(rotate(mat_paisagem))
title(main=X$txt.file)title(main=X$txt.file)
title(main=X$txt.file)title(main=X$txt.file)
X$txt.file
i <- 1
X <- df_simulacao[i,]
X
mat_paisagem <- read.table(X$path_paisagens,header = FALSE) %>% as.matrix()
rotate <- function(a) t(apply(a, 2, rev))
image(rotate(mat_paisagem))
title(main=X$txt.file)
image(rotate(mat_paisagem))
image(rotate(mat_paisagem),main=X$txt.file)
f_plot <- function(X){
X <- df_simulacao[1,]
mat_paisagem <- read.table(X$path_paisagens,header = FALSE) %>% as.matrix()
rotate <- function(a) t(apply(a, 2, rev))
image(rotate(mat_paisagem),main=X$txt.file)
title(main=X$txt.file)
}
a_ply(df_simulacao,1,f_plot)
a_ply(df_simulacao,1,f_plot)
